package cakesolutions.kafka.testkit

import java.io.File
import java.net.ServerSocket

import kafka.server.{KafkaConfig, KafkaServerStartable}
import org.apache.curator.test.TestingServer
import org.slf4j.LoggerFactory

import scala.collection.JavaConverters._
import scala.util.{Random, Try}

object KafkaServer {

  private val log = LoggerFactory.getLogger(getClass)

  private def randomAvailablePort(): Int = {
    val socket = new ServerSocket(0)
    val port = socket.getLocalPort
    socket.close()
    port
  }

  /**
    * Default configurations used by the Kafka test server
    */
  val defaultConfig: Map[String, String] = Map(
    "broker.id" -> "1",
    "replica.socket.timeout.ms" -> "1500",
    "controlled.shutdown.enable" -> "true"
  )

  private def createConfig(
    port: Int,
    zookeeperPort: Int,
    logDir: File,
    otherOptions: Map[String, String]
  ): KafkaConfig = {

    val baseConfig = Map(
      "port" -> port.toString,
      "zookeeper.connect" -> ("localhost:" + zookeeperPort.toString),
      "log.dir" -> logDir.getAbsolutePath
    )

    val extendedConfig = otherOptions ++ baseConfig

    new KafkaConfig(extendedConfig.asJava)
  }

  private def createTempDir(dirPrefix: String): File = {
    val randomString = Random.alphanumeric.take(10).mkString("")
    val f = new File(System.getProperty("java.io.tmpdir"), dirPrefix + randomString)
    f.deleteOnExit()
    f
  }

  private def deleteFile(path: File): Unit = {
    if (path.isDirectory)
      path.listFiles().foreach(deleteFile)

    path.delete()
  }
}

/**
  * A startable Kafka and Zookeeper server. Kafka and ZookeeperPort is generated by default.
  */
final class KafkaServer(
  val kafkaPort: Int = KafkaServer.randomAvailablePort(),
  val zookeeperPort: Int = KafkaServer.randomAvailablePort(),
  kafkaConfig: Map[String, String] = KafkaServer.defaultConfig
) {

  import KafkaServer._

  private val logDir = createTempDir("kafka-local")

  // Start a zookeeper server
  private val zkServer = new TestingServer(zookeeperPort, false)

  // Build Kafka config with zookeeper connection
  private val config = createConfig(kafkaPort, zookeeperPort, logDir = logDir, kafkaConfig)

  // Kafka Test Server
  private val kafkaServer = new KafkaServerStartable(config)

  def startup(): Unit = {
    log.info("ZK Connect String: {}", zkServer.getConnectString)
    zkServer.start()
    kafkaServer.startup()
    log.info(s"Started kafka on port [$kafkaPort]")
  }

  def close(): Unit = {
    log.info(s"Stopping kafka on port [$kafkaPort]")
    kafkaServer.shutdown()
    zkServer.stop()
    Try(deleteFile(logDir)).failed.foreach(_.printStackTrace)
  }
}
